import{a as i,c as l,b as s,d as e,f as t,e as r,w as o,r as d,o as g}from"./app-C7AwxLk6.js";const u={},p={start:"5"},m={start:"6"},f={start:"10"};function v(c,n){const a=d("VPLink");return g(),l("div",null,[n[24]||(n[24]=s('<div class="hint-container note"><p class="hint-container-title">Note</p><p>This guide provides a complete exploration of JavaScript&#39;s pure language concepts, from fundamentals to advanced topics. This covers core mechanisms, advanced patterns, functional programming paradigms, metaprogramming capabilities, type systems, language specification details, and concurrency models - essential knowledge for understanding JavaScript at a deep level.</p></div><h2 id="course-structure" tabindex="-1"><a class="header-anchor" href="#course-structure"><span><strong>Course Structure</strong></span></a></h2><h3 id="core-fundamentals" tabindex="-1"><a class="header-anchor" href="#core-fundamentals"><span><strong>Core Fundamentals</strong></span></a></h3>',3)),e("ol",null,[e("li",null,[e("strong",null,[r(a,{href:"./1.basic.md"},{default:o(()=>n[0]||(n[0]=[t("Basic Concepts",-1)])),_:1,__:[0]})]),n[1]||(n[1]=t(" - Variables, data types, operators, and basic syntax",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./2.core.md"},{default:o(()=>n[2]||(n[2]=[t("Core Language Features",-1)])),_:1,__:[2]})]),n[3]||(n[3]=t(" - Scope, closures, hoisting, and execution context",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./3.functions.md"},{default:o(()=>n[4]||(n[4]=[t("Advanced Functions",-1)])),_:1,__:[4]})]),n[5]||(n[5]=t(" - Function types, closures, and advanced patterns",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./4.objects.md"},{default:o(()=>n[6]||(n[6]=[t("Objects and Prototypes",-1)])),_:1,__:[6]})]),n[7]||(n[7]=t(" - Object-oriented programming and prototype chains",-1))])]),n[25]||(n[25]=e("h3",{id:"modern-javascript",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#modern-javascript"},[e("span",null,[e("strong",null,"Modern JavaScript")])])],-1)),e("ol",p,[e("li",null,[e("strong",null,[r(a,{href:"./5.async.md"},{default:o(()=>n[8]||(n[8]=[t("Asynchronous Programming",-1)])),_:1,__:[8]})]),n[9]||(n[9]=t(" - Promises, async/await, and event handling",-1))])]),n[26]||(n[26]=e("h3",{id:"advanced-language-concepts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#advanced-language-concepts"},[e("span",null,[e("strong",null,"Advanced Language Concepts")])])],-1)),e("ol",m,[e("li",null,[e("strong",null,[r(a,{href:"./6.error-handling.md"},{default:o(()=>n[10]||(n[10]=[t("Error Handling",-1)])),_:1,__:[10]})]),n[11]||(n[11]=t(" - Custom errors, error propagation, and defensive programming",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./7.memory_management.md"},{default:o(()=>n[12]||(n[12]=[t("Memory Management",-1)])),_:1,__:[12]})]),n[13]||(n[13]=t(" - Garbage collection, memory leaks, and optimization",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./8.metaprogramming.md"},{default:o(()=>n[14]||(n[14]=[t("Metaprogramming",-1)])),_:1,__:[14]})]),n[15]||(n[15]=t(" - Reflect, Proxy, Symbols, and advanced patterns",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./9.functional-programming.md"},{default:o(()=>n[16]||(n[16]=[t("Functional Programming",-1)])),_:1,__:[16]})]),n[17]||(n[17]=t(" - Pure functions, immutability, functors, and monads",-1))])]),n[27]||(n[27]=e("h3",{id:"language-internals",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#language-internals"},[e("span",null,[e("strong",null,"Language Internals")])])],-1)),e("ol",f,[e("li",null,[e("strong",null,[r(a,{href:"./10.language-specification.md"},{default:o(()=>n[18]||(n[18]=[t("Language Specification",-1)])),_:1,__:[18]})]),n[19]||(n[19]=t(" - ECMAScript spec, engines, and implementation details",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./11.advanced-types.md"},{default:o(()=>n[20]||(n[20]=[t("Advanced Type System",-1)])),_:1,__:[20]})]),n[21]||(n[21]=t(" - Type coercion, abstract operations, and custom validation",-1))]),e("li",null,[e("strong",null,[r(a,{href:"./12.concurrency.md"},{default:o(()=>n[22]||(n[22]=[t("Concurrency Models",-1)])),_:1,__:[22]})]),n[23]||(n[23]=t(" - Event loop, Web Workers, and parallel processing",-1))])]),n[28]||(n[28]=s('<h2 id="learning-path" tabindex="-1"><a class="header-anchor" href="#learning-path"><span><strong>Learning Path</strong></span></a></h2><p>This guide is structured to build knowledge progressively:</p><ul><li><strong>Start with Core Fundamentals</strong> (Sections 1-4) to understand JavaScript&#39;s basic building blocks</li><li><strong>Move to Modern JavaScript</strong> (Section 5) to grasp asynchronous patterns</li><li><strong>Explore Advanced Concepts</strong> (Sections 6-9) to master sophisticated programming patterns</li><li><strong>Dive into Language Internals</strong> (Sections 10-12) to understand how JavaScript works under the hood</li></ul>',3))])}const b=i(u,[["render",v]]),S=JSON.parse('{"path":"/programming-paradigm/vc3jn10z/","title":"Comprehensive JavaScript Language Guide","lang":"en-US","frontmatter":{"title":"Comprehensive JavaScript Language Guide","createTime":"2025/08/05 11:54:22","permalink":"/programming-paradigm/vc3jn10z/"},"readingTime":{"minutes":3.33,"words":266},"git":{"createdTime":1754402467000,"updatedTime":1754402467000,"changelog":[{"hash":"544234923c0d3669504d639c1b04cca8b63aea36","time":1754402467000,"email":"yunfeng.long@yahoo.com","author":"WARREN Y.F. LONG","message":"feat: add comprehensive guide on JavaScript language concepts and course structure"}]},"filePathRelative":"notes/programming-paradigm/js/README.md","headers":[]}');export{b as comp,S as data};
