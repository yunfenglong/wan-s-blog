import{a as t,c as a,b as n,o as s}from"./app-C7AwxLk6.js";const o={};function r(i,e){return s(),a("div",null,e[0]||(e[0]=[n('<h2 id="what-is-inter-process-communication-ipc" tabindex="-1"><a class="header-anchor" href="#what-is-inter-process-communication-ipc"><span>What is Inter-Process Communication (IPC)?</span></a></h2><p><strong>Inter-Process Communication (IPC)</strong> refers to all mechanisms that allow two or more processes to exchange messages and data. These mechanisms can be categorized based on their scope:</p><ul><li><strong>Local IPC</strong>: Communication is restricted to processes running on the same host machine&#39;s operating system.</li><li><strong>Networked IPC</strong>: Communication is permitted between processes on different host machines connected via a network.</li></ul><h2 id="local-ipc-mechanisms" tabindex="-1"><a class="header-anchor" href="#local-ipc-mechanisms"><span>Local IPC Mechanisms</span></a></h2><p>IPC mechanisms restricted to a single host operating system typically include:</p><ul><li><strong>Shared Memory</strong>: This method works by mapping shared pages of memory into the address space of two or more processes, allowing them to read and write to a common memory area. Shared memory is very fast but imposes no structure on the data being exchanged.</li><li><strong>Message Passing</strong>: Processes communicate by sending and receiving formatted messages.</li><li><strong>Unix Signals (and analogues)</strong>: A simple form of IPC where one process can send a signal (a notification) to another.</li></ul><p>Unlike the free-form nature of shared memory, both Message Passing and Signals typically require messages to adhere to a discrete, predefined structure.</p><h2 id="stream-oriented-ipc" tabindex="-1"><a class="header-anchor" href="#stream-oriented-ipc"><span>Stream-Oriented IPC</span></a></h2><p>Stream-oriented communication is one of the most common schemes used for both local and networked IPC.</p><h3 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How It Works</span></a></h3><p>A stream connection is unstructured, handling data as a <strong>First-In, First-Out (FIFO)</strong> sequence of bytes or characters. The stream typically arrives at the destination in the same order it was sent, making it behave like a transparent pipe from the perspective of an application protocol.</p><p>The two most widely used stream-oriented IPC mechanisms are <strong>BSD Sockets</strong> and <strong>SVR4 STREAMS</strong>, both of which are designed around standard Application Programming Interfaces (APIs). These APIs are provided by <strong>middleware</strong>, which sits between the user application and the operating system&#39;s protocol stack (like TCP/UDP).</p><h3 id="channel-properties" tabindex="-1"><a class="header-anchor" href="#channel-properties"><span>Channel Properties</span></a></h3><ul><li><strong>Reliability</strong>: The communication channel is considered &quot;reliable&quot; when it connects two processes on a single host or across a network using the <strong>TCP protocol</strong>. It is &quot;unreliable&quot; when using the <strong>UDP protocol</strong> for networked communication.</li><li><strong>Ordering</strong>: Stream IPC connections almost always deliver messages &quot;in order,&quot; behaving like a FIFO queue or pipe.</li><li><strong>Behavior</strong>: The interface can be either &quot;blocking&quot; or &quot;non-blocking&quot; depending on the API and its configuration, which determines whether a process must wait for a message transfer to complete.</li></ul><h3 id="performance-considerations" tabindex="-1"><a class="header-anchor" href="#performance-considerations"><span>Performance Considerations</span></a></h3><p>In parallel applications running on distributed platforms like clusters and clouds, IPC performance is a critical challenge. There are two primary metrics for performance:</p><ul><li><strong>Latency (Delay)</strong>: The total time it takes for a message to travel from the sending process to the receiving process.</li><li><strong>Throughput (Bandwidth)</strong>: The volume of data that can be sent over a link per unit of time (e.g., Gigabits/second).</li></ul><p>Even on high-bandwidth networks, latency can be significant, especially in applications with data dependencies where one process must wait for data from another before it can continue.</p><h3 id="sources-of-latency-in-data-centers" tabindex="-1"><a class="header-anchor" href="#sources-of-latency-in-data-centers"><span>Sources of Latency in Data Centers</span></a></h3><p>In a typical data center, latency accumulates from several sources as a packet travels from a source node to a destination node:</p><ol><li><strong>Node Delays</strong>: Delays within the source and destination nodes caused by the middleware and the operating system&#39;s protocol stack processing.</li><li><strong>Router Delays</strong>: Queuing and processing delays at each router the packet passes through in the network fabric.</li><li><strong>Propagation Delays</strong>: The physical time it takes for the signal to travel through the network cables, which is proportional to the total path length.</li></ol>',21)]))}const l=t(o,[["render",r]]),h=JSON.parse('{"path":"/fit3143/8vfmmfp6/","title":"Inner-Process Communications","lang":"en-US","frontmatter":{"title":"Inner-Process Communications","createTime":"2025/08/02 20:59:55","permalink":"/fit3143/8vfmmfp6/"},"readingTime":{"minutes":7.24,"words":579},"git":{"createdTime":1754146040000,"updatedTime":1754146040000,"changelog":[{"hash":"38fa9a6d0a743a0a4735de8761312f7220e0f7dc","time":1754146040000,"email":"yunfeng.long@yahoo.com","author":"wanfunglung","message":"feat: add new notes on parallel architectures, applications, and IPC mechanisms"}]},"filePathRelative":"notes/fit3143/ipc/3.ipc.md","headers":[]}');export{l as comp,h as data};
