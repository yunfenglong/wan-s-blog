import{a as g,c as b,d as t,e as o,w as e,r,o as y,f as l}from"./app-C7AwxLk6.js";const v={};function w(x,n){const i=r("Annotation"),u=r("VPCard"),m=r("VPCardGrid"),s=r("VPIcon"),a=r("VPTimelineItem"),p=r("VPTimeline"),d=r("VPCollapseItem"),f=r("VPCollapse");return y(),b("div",null,[n[105]||(n[105]=t("div",{class:"hint-container note"},[t("p",{class:"hint-container-title"},"Note"),t("p",null,"JavaScript was created by Brendan Eich at Netscape in 1995. Though initially rushed, it survived to become a cornerstone of the modern web, maturing with the ECMAScript 6 (ES6) standard into an elegant, multi-paradigm language. This summary covers its fundamental concepts, from variables and scope to its powerful implementation of functions and classes.")],-1)),n[106]||(n[106]=t("h3",{id:"fundamental-concepts",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fundamental-concepts"},[t("span",null,"Fundamental Concepts")])],-1)),n[107]||(n[107]=t("p",null,"JavaScript's core is built on a few essential concepts that govern how code is written and executed.",-1)),o(m,null,{default:e(()=>[o(u,{title:"Variables: `let` vs. `const`",icon:"mdi:variable-box"},{default:e(()=>[t("p",null,[n[2]||(n[2]=l("Variables are declared using ",-1)),n[3]||(n[3]=t("code",null,"let",-1)),n[4]||(n[4]=l(" for ",-1)),n[5]||(n[5]=t("strong",null,"mutable",-1)),n[6]||(n[6]=l()),o(i,{label:"MutableVariable",total:1},{"item-0":e(()=>n[0]||(n[0]=[t("p",null,[l("A variable declared with "),t("code",null,"let"),l(" that can be reassigned to different values.")],-1)])),_:1}),n[7]||(n[7]=l(" (changeable) values and ",-1)),n[8]||(n[8]=t("code",null,"const",-1)),n[9]||(n[9]=l(" for ",-1)),n[10]||(n[10]=t("strong",null,"immutable",-1)),n[11]||(n[11]=l()),o(i,{label:"ImmutableVariable",total:1},{"item-0":e(()=>n[1]||(n[1]=[t("p",null,[l("A variable declared with "),t("code",null,"const"),l(" whose value cannot be reassigned.")],-1)])),_:1}),n[12]||(n[12]=l(" variables, whose values cannot be reassigned after their initial declaration. It is recommended to use ",-1)),n[13]||(n[13]=t("code",null,"let",-1)),n[14]||(n[14]=l(" and ",-1)),n[15]||(n[15]=t("code",null,"const",-1)),n[16]||(n[16]=l(" over the older ",-1)),n[17]||(n[17]=t("code",null,"var",-1)),n[18]||(n[18]=l(" keyword.",-1))])]),_:1}),o(u,{title:"Expressions vs. Statements",icon:"mdi:code-braces"},{default:e(()=>[t("p",null,[n[20]||(n[20]=l("An ",-1)),n[21]||(n[21]=t("strong",null,"expression",-1)),n[22]||(n[22]=l(" is any code that evaluates to a value (e.g., ",-1)),n[23]||(n[23]=t("code",null,"1 + 1",-1)),n[24]||(n[24]=l(" evaluates to ",-1)),n[25]||(n[25]=t("code",null,"2",-1)),n[26]||(n[26]=l("). A ",-1)),n[27]||(n[27]=t("strong",null,"statement",-1)),n[28]||(n[28]=l(" performs an action and evaluates to ",-1)),n[29]||(n[29]=t("code",null,"undefined",-1)),n[30]||(n[30]=l(", such as a variable declaration or a code block defined with ",-1)),n[31]||(n[31]=t("code",null,"{}",-1)),n[32]||(n[32]=l(". Statements must have a ",-1)),n[33]||(n[33]=t("strong",null,"side effect",-1)),n[34]||(n[34]=l()),o(i,{label:"SideEffects",total:1},{"item-0":e(()=>n[19]||(n[19]=[t("p",null,"Any state change that occurs outside of a function's local environment or any observable interaction with the outside world, such as modifying a global variable, writing to a file, or printing to a console.",-1)])),_:1}),n[35]||(n[35]=l(" to be useful.",-1))])]),_:1}),o(u,{title:"Types and Scope",icon:"mdi:crosshairs-question"},{default:e(()=>n[36]||(n[36]=[t("p",null,[l("JavaScript has primitive types like "),t("code",null,"number"),l(", "),t("code",null,"string"),l(", and "),t("code",null,"boolean"),l(". It is "),t("strong",null,"loosely typed"),l(", meaning a variable's type can change during execution. A variable's "),t("strong",null,"scope"),l(" is the region where it is visible, which can be limited by declaring it inside a code block "),t("code",null,"{...}"),l(".")],-1)])),_:1,__:[36]})]),_:1}),n[108]||(n[108]=t("hr",null,null,-1)),n[109]||(n[109]=t("h3",{id:"the-power-of-functions-in-javascript",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#the-power-of-functions-in-javascript"},[t("span",null,"The Power of Functions in JavaScript")])],-1)),n[110]||(n[110]=t("p",null,"Functions in JavaScript are first-class objects, leading to a progression of powerful concepts and patterns.",-1)),o(p,{card:void 0},{default:e(()=>[o(a,{time:"Step 1",icon:"mdi:function",card:void 0},{icon:e(()=>[o(s,{provider:"iconify",name:"mdi:function"})]),title:e(()=>n[37]||(n[37]=[t("strong",null,"Basic Declaration & Purity",-1)])),default:e(()=>[t("p",null,[n[40]||(n[40]=l("Functions are declared with the ",-1)),n[41]||(n[41]=t("code",null,"function",-1)),n[42]||(n[42]=l(" keyword and can use control flow like ",-1)),n[43]||(n[43]=t("code",null,"if-else",-1)),n[44]||(n[44]=l(", ",-1)),n[45]||(n[45]=t("code",null,"while",-1)),n[46]||(n[46]=l(", and ",-1)),n[47]||(n[47]=t("code",null,"for",-1)),n[48]||(n[48]=l(". Recursive functions written in a declarative style can be ",-1)),n[49]||(n[49]=t("strong",null,"pure",-1)),n[50]||(n[50]=l()),o(i,{label:"PureFunction",total:1},{"item-0":e(()=>n[38]||(n[38]=[t("p",null,"A function that always produces the same output for the same input and has no side effects.",-1)])),_:1}),n[51]||(n[51]=l(", exhibiting ",-1)),n[52]||(n[52]=t("strong",null,"referential transparency",-1)),n[53]||(n[53]=l()),o(i,{label:"ReferentialTransparency",total:1},{"item-0":e(()=>n[39]||(n[39]=[t("p",null,"An expression that can be replaced with its value without changing the program's behaviour, indicating no side effects and consistent results.",-1)])),_:1}),n[54]||(n[54]=l(" by avoiding side effects.",-1))])]),_:1}),o(a,{time:"Step 2",icon:"mdi:hand-extended-outline",placement:"right",card:void 0},{icon:e(()=>[o(s,{provider:"iconify",name:"mdi:hand-extended-outline"})]),title:e(()=>n[55]||(n[55]=[t("strong",null,"First-Class Citizens",-1)])),default:e(()=>[n[56]||(n[56]=t("p",null,"Functions are objects, meaning they can be bound to variables and passed around just like any other value.",-1))]),_:1,__:[56]}),o(a,{time:"Step 3",icon:"mdi:lambda",card:void 0},{icon:e(()=>[o(s,{provider:"iconify",name:"mdi:lambda"})]),title:e(()=>n[57]||(n[57]=[t("strong",null,"Anonymous & Arrow Functions",-1)])),default:e(()=>[t("p",null,[n[60]||(n[60]=l("Functions can be defined without a name (",-1)),n[61]||(n[61]=t("strong",null,"anonymous functions",-1)),n[62]||(n[62]=l()),o(i,{label:"AnonymousFunction",total:1},{"item-0":e(()=>n[58]||(n[58]=[t("p",null,"A function defined without a name, often used as an argument to other functions. Also known as a lambda function.",-1)])),_:1}),n[63]||(n[63]=l("). ES6 introduced compact ",-1)),n[64]||(n[64]=t("strong",null,"arrow syntax",-1)),n[65]||(n[65]=l(" (",-1)),n[66]||(n[66]=t("code",null,"=>",-1)),n[67]||(n[67]=l("), which is ideal for passing functions as parameters to ",-1)),n[68]||(n[68]=t("strong",null,"higher-order functions",-1)),n[69]||(n[69]=l()),o(i,{label:"HigherOrderFunction",total:1},{"item-0":e(()=>n[59]||(n[59]=[t("p",null,"A function that takes other functions as arguments or returns a function as its result.",-1)])),_:1}),n[70]||(n[70]=l(" like ",-1)),n[71]||(n[71]=t("code",null,"array.map()",-1)),n[72]||(n[72]=l(".",-1))])]),_:1}),o(a,{time:"Step 4",icon:"mdi:lock-outline",placement:"right",card:void 0},{icon:e(()=>[o(s,{provider:"iconify",name:"mdi:lock-outline"})]),title:e(()=>n[73]||(n[73]=[t("strong",null,"Closures & Currying",-1)])),default:e(()=>[t("p",null,[n[76]||(n[76]=l("A ",-1)),n[77]||(n[77]=t("strong",null,"closure",-1)),n[78]||(n[78]=l()),o(i,{label:"Closure",total:1},{"item-0":e(()=>n[74]||(n[74]=[t("p",null,"A function and the set of variables it accesses from its enclosing scope.",-1)])),_:1}),n[79]||(n[79]=l(" is a function that captures variables from its enclosing scope, allowing those variables to persist. This enables patterns like ",-1)),n[80]||(n[80]=t("strong",null,"currying",-1)),n[81]||(n[81]=l()),o(i,{label:"Currying",total:1},{"item-0":e(()=>n[75]||(n[75]=[t("p",null,"The process of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument.",-1)])),_:1}),n[82]||(n[82]=l(", where a function taking multiple arguments is transformed into a sequence of functions that each take one argument.",-1))])]),_:1})]),_:1}),n[111]||(n[111]=t("hr",null,null,-1)),n[112]||(n[112]=t("h3",{id:"working-with-data-structures",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#working-with-data-structures"},[t("span",null,"Working with Data Structures")])],-1)),n[113]||(n[113]=t("p",null,"JavaScript provides flexible ways to work with collections of data using arrays and objects.",-1)),o(f,{accordion:"",index:0},{default:e(()=>[o(d,{expand:"",index:0},{title:e(()=>n[83]||(n[83]=[t("strong",null,"Objects & Classes",-1)])),default:e(()=>[t("ul",null,[t("li",null,[n[85]||(n[85]=l("In JavaScript, objects are essentially property bags indexed by a hashtable. When an object is declared with ",-1)),n[86]||(n[86]=t("code",null,"const",-1)),n[87]||(n[87]=l(", the reference is immutable, but the object's properties remain mutable (",-1)),n[88]||(n[88]=t("em",null,"weakly immutable",-1)),n[89]||(n[89]=l()),o(i,{label:"WeaklyImmutable",total:1},{"item-0":e(()=>n[84]||(n[84]=[t("p",null,[l("A property of "),t("code",null,"const"),l("-declared objects in JavaScript, where the variable reference is immutable, but the object's properties can still be changed.")],-1)])),_:1}),n[90]||(n[90]=l("). ES6 introduced a ",-1)),n[91]||(n[91]=t("code",null,"class",-1)),n[92]||(n[92]=l(" syntax that is more familiar to Java or Python programmers, supporting constructors, methods, getters, and single inheritance.",-1))])])]),_:1}),o(d,{index:1},{title:e(()=>n[93]||(n[93]=[t("strong",null,"Arrays & Methods",-1)])),default:e(()=>[n[94]||(n[94]=t("ul",null,[t("li",null,[l("JavaScript arrays have a simple literal syntax ("),t("code",null,"[1, 2, 3]"),l(") and come with powerful, pure methods for data transformation. "),t("mark",{class:"info"},"Key Methods"),l(": "),t("ul",null,[t("li",null,[t("code",null,"map(f)"),l(": Applies function "),t("code",null,"f"),l(" to each element, returning a new array.")]),t("li",null,[t("code",null,"filter(f)"),l(": Returns a new array containing only elements for which predicate "),t("code",null,"f"),l(" returns true.")]),t("li",null,[t("code",null,"reduce(f, initial)"),l(": Applies function "),t("code",null,"f"),l(" to combine all elements into a single aggregated value.")])])])],-1))]),_:1,__:[94]}),o(d,{index:2},{title:e(()=>n[95]||(n[95]=[t("strong",null,"Polymorphism & Dependency Injection",-1)])),default:e(()=>[t("ul",null,[t("li",null,[n[97]||(n[97]=l("JavaScript supports ",-1)),n[98]||(n[98]=t("em",null,"subtyping polymorphism",-1)),n[99]||(n[99]=l(" through classes and inheritance. It also allows for informal polymorphism known as “Duck Typing”. This can be contrasted with a more functional approach, ",-1)),n[100]||(n[100]=t("strong",null,"dependency injection",-1)),n[101]||(n[101]=l(", where behavior is customized by passing functions into an object's constructor. Many modern languages also support ",-1)),n[102]||(n[102]=t("strong",null,"parametric polymorphism",-1)),n[103]||(n[103]=l()),o(i,{label:"ParametricPolymorphism",total:1},{"item-0":e(()=>n[96]||(n[96]=[t("p",null,"A type of polymorphism where functions or data types can be written generically so that they can handle values uniformly without depending on their type.",-1)])),_:1}),n[104]||(n[104]=l(" for creating generic, type-safe code.",-1))])])]),_:1})]),_:1})])}const S=g(v,[["render",w]]),A=JSON.parse('{"path":"/programming-paradigm/pxxnb71r/","title":"Introduction to JavaScript","lang":"en-US","frontmatter":{"title":"Introduction to JavaScript","createTime":"2025/08/05 11:45:58","permalink":"/programming-paradigm/pxxnb71r/"},"readingTime":{"minutes":10.88,"words":870},"git":{"createdTime":1754402445000,"updatedTime":1754402445000,"changelog":[{"hash":"27885b9a1d528e8c4b1de4ba83f5f4fa1d34c13d","time":1754402445000,"email":"yunfeng.long@yahoo.com","author":"WARREN Y.F. LONG","message":"feat: add new notes on Modern ES6+ Features, Objects and Prototypal Inheritance, and Functions"}]},"filePathRelative":"notes/programming-paradigm/js/1.basic.md","headers":[]}');export{S as comp,A as data};
