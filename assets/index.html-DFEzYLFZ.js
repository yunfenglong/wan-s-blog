import{a as r,c as o,b as t,e as n,r as a,o as i}from"./app-C7AwxLk6.js";const l={};function c(d,e){const s=a("Mermaid");return i(),o("div",null,[e[0]||(e[0]=t('<h2 id="processes-in-operating-systems" tabindex="-1"><a class="header-anchor" href="#processes-in-operating-systems"><span>Processes in Operating Systems</span></a></h2><p>A <strong>process</strong> is a fundamental concept in operating systems. It can be defined in several ways:</p><ul><li>A program in execution.</li><li>An instance of a program running on a computer.</li><li>The entity that can be assigned to and executed on a processor.</li><li>A unit of activity characterized by the execution of a sequence of instructions, a current state, and an associated set of system instructions.</li></ul><p>A process is comprised of:</p><ul><li><strong>Program code</strong>, which may be shared with other processes.</li><li>A <strong>set of data</strong>.</li><li>A number of <strong>attributes</strong> that describe the state of the process.</li></ul><h2 id="process-identity-and-state-information" tabindex="-1"><a class="header-anchor" href="#process-identity-and-state-information"><span>Process Identity and State Information</span></a></h2><p>For an operating system to manage and identify a process, it must maintain specific attributes. The minimum required information includes:</p><ol><li><strong>Identifier</strong>: A unique ID for the process.</li><li><strong>State</strong>: The current state of the process (e.g., running, waiting).</li><li><strong>Priority</strong>: The priority level relative to other processes.</li><li><strong>Program counter</strong>: The address of the next instruction to be executed.</li><li><strong>Memory pointers</strong>: Pointers to the code, data, and other memory segments used by the process.</li><li><strong>Context data</strong>: Data held in processor registers.</li><li><strong>I/O status information</strong>: Includes outstanding I/O requests, open files, etc.</li><li><strong>Accounting information</strong>: CPU time used, time limits, etc.</li></ol><p>This collection of information is stored in a data structure called a <strong>Process Control Block (PCB)</strong>.</p><h2 id="process-control-block-pcb" tabindex="-1"><a class="header-anchor" href="#process-control-block-pcb"><span>Process Control Block (PCB)</span></a></h2><p>The PCB is a critical data structure managed by the operating system.</p><ul><li>It contains all the essential elements and attributes of a process.</li><li>The operating system creates and manages a PCB for every process, which allows it to support the execution of multiple processes.</li><li>The specific structure and format of a PCB are unique to each operating system; they are generally not interchangeable between different OS types.</li></ul><h2 id="processes-in-memory" tabindex="-1"><a class="header-anchor" href="#processes-in-memory"><span>Processes in Memory</span></a></h2><p>When user processes are loaded into virtual memory, they each have their own <strong>private user address space</strong>, which contains their programs and data, as well as a <strong>user stack</strong>. Processes can also utilize a <strong>shared address space</strong> to communicate or share resources with other processes. Each process is associated with its own Process Control Block, which holds its identification, processor state, and other control information.</p><h2 id="process-states" tabindex="-1"><a class="header-anchor" href="#process-states"><span>Process States</span></a></h2><p>A process transitions through various states during its lifecycle. A common model is the <strong>five-state process model</strong>. Inter-Process Communications (IPC) may or may not cause a process to block.</p>',16)),n(s,{code:"eJxlj88KwjAMxu97irCTHvoCKoKiXsQ/6MCDeKhd2MK6drTdpm9vuw0mLIeQkF/yfWGMRY6cxAUcqEF2d9whXI0WaC2cdIoyCkxmeJVDsovAxxnbZ+zT6m3Ws3vFWwXawEGbYh6/gDHYpCU5X6zhhjz9LrutrgzTHdmKO5H3QK0UqWxA+iZACZWo6+mRkdg3qBw8+KC0lVoUmE6wG0rkFjtm/yH3jEPurCdoSlLhYW//SFJ6+/3+cGyUuQhRG/vv5gfbgV4u"}),e[1]||(e[1]=t('<h2 id="unix-process-states" tabindex="-1"><a class="header-anchor" href="#unix-process-states"><span>Unix Process States</span></a></h2><p>Unix and Unix-like systems define a more detailed set of process states:</p><table><thead><tr><th style="text-align:left;">State</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>User Running</strong></td><td style="text-align:left;">Executing in user mode.</td></tr><tr><td style="text-align:left;"><strong>Kernel Running</strong></td><td style="text-align:left;">Executing in kernel mode.</td></tr><tr><td style="text-align:left;"><strong>Ready to Run, in Memory</strong></td><td style="text-align:left;">Ready to run as soon as the kernel schedules it.</td></tr><tr><td style="text-align:left;"><strong>Asleep in Memory</strong></td><td style="text-align:left;">Unable to execute until an event occurs; the process is in main memory (a blocked state).</td></tr><tr><td style="text-align:left;"><strong>Ready to Run, Swapped</strong></td><td style="text-align:left;">The process is ready to run, but the swapper must swap it into main memory before the kernel can schedule it to execute.</td></tr><tr><td style="text-align:left;"><strong>Sleeping, Swapped</strong></td><td style="text-align:left;">The process is awaiting an event and has been swapped to secondary storage (a blocked state).</td></tr><tr><td style="text-align:left;"><strong>Preempted</strong></td><td style="text-align:left;">The process is returning from kernel to user mode, but the kernel preempts it and does a process switch to schedule another process.</td></tr><tr><td style="text-align:left;"><strong>Created</strong></td><td style="text-align:left;">The process is newly created and not yet ready to run.</td></tr><tr><td style="text-align:left;"><strong>Zombie</strong></td><td style="text-align:left;">The process no longer exists, but it leaves a record for its parent process to collect.</td></tr></tbody></table>',3))])}const h=r(l,[["render",c]]),g=JSON.parse('{"path":"/fit3143/22evhhai/","title":"Processes","lang":"en-US","frontmatter":{"title":"Processes","createTime":"2025/08/02 19:56:59","permalink":"/fit3143/22evhhai/"},"readingTime":{"minutes":7.63,"words":610},"git":{"createdTime":1754146040000,"updatedTime":1754146040000,"changelog":[{"hash":"38fa9a6d0a743a0a4735de8761312f7220e0f7dc","time":1754146040000,"email":"yunfeng.long@yahoo.com","author":"wanfunglung","message":"feat: add new notes on parallel architectures, applications, and IPC mechanisms"}]},"filePathRelative":"notes/fit3143/ipc/1.process_basic.md","headers":[]}');export{h as comp,g as data};
