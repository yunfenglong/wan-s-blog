import{a as d,c as r,b as n,d as s,e as t,w as l,r as h,o,f as e}from"./app-C7AwxLk6.js";const p={},c={class:"vp-field-group"};function k(g,i){const a=h("VPField");return o(),r("div",null,[i[2]||(i[2]=n(`<p>This section uncovers JavaScript&#39;s unique object model, from property descriptors to the prototype chain that underpins the <code>class</code> syntax.</p><ul><li><strong>Object Property Descriptors</strong> Every property on an object is defined by more than just its value. It has a &quot;property descriptor&quot; with internal attributes:</li></ul><ul><li><code>value</code>: The value of the property.</li><li><code>writable</code>: If <code>true</code>, the value can be changed.</li><li><code>enumerable</code>: If <code>true</code>, the property will appear in <code>for...in</code> loops and <code>Object.keys()</code>.</li><li><code>configurable</code>: If <code>true</code>, the property can be deleted, and its attributes (except <code>value</code> and <code>writable</code> if <code>writable</code> is <code>false</code>) can be changed.</li></ul><p>You can view and modify these with <code>Object.getOwnPropertyDescriptor()</code> and <code>Object.defineProperty()</code>. This allows for fine-grained control over object behavior.</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">defineProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">readOnly</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    writable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    enumerable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    configurable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// obj.readOnly = 100;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Fails silently (or throws in strict mode)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>The Prototype Chain Explained</strong> Inheritance in JavaScript works via prototypes.</li></ul>`,6)),s("div",c,[t(a,{name:"`prototype` Property"},{default:l(()=>i[0]||(i[0]=[s("p",null,[e("Every "),s("em",null,"function"),e(" has a special "),s("code",null,"prototype"),e(" property. This is an object that will become the prototype for all instances created by that function when used as a constructor with "),s("code",null,"new"),e(".")],-1)])),_:1,__:[0]}),t(a,{name:"`[[Prototype]]` (or `__proto__`)"},{default:l(()=>i[1]||(i[1]=[s("p",null,[e("Every "),s("em",null,"object instance"),e(" has a hidden "),s("code",null,"[[Prototype]]"),e(" link (often accessible via "),s("code",null,"__proto__"),e(") that points to its prototype object.")],-1)])),_:1,__:[1]})]),i[3]||(i[3]=n(`<p>When you access <code>instance.someMethod()</code>, the engine first looks for <code>someMethod</code> on <code>instance</code>. If not found, it follows the <code>[[Prototype]]</code> link and looks on <code>instance</code>&#39;s prototype. This continues up the chain until the method is found or the end of the chain (<code>Object.prototype</code>, which has a <code>null</code> prototype) is reached.</p><p><strong><code>Object.create()</code></strong>: This is a direct way to create a new object with a specified prototype, bypassing the need for a constructor function. <code>const child = Object.create(parent);</code></p><ul><li><strong>ES6 Classes: Syntactic Sugar and Advanced Features</strong> The <code>class</code> syntax provides a cleaner way to work with prototypes.</li></ul><p><strong><code>extends</code> and <code>super()</code></strong>:</p><ul><li><code>extends</code> sets up the prototype chain. <code>class Child extends Parent {}</code> links <code>Child.prototype</code> to <code>Parent.prototype</code>.</li><li><code>super()</code> must be called in the child class&#39;s <code>constructor</code> <em>before</em> using <code>this</code>. It calls the parent constructor to initialize the parent part of the object.</li><li><code>super.method()</code> can be used to call a method from the parent class.</li></ul><p><strong>Private Fields (<code>#</code>)</strong>: Modern JavaScript allows for truly private class fields using a <code>#</code> prefix. These fields are inaccessible from outside the class instance.</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    #count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Truly private field</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    increment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">#count</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    getValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">#count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Counter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// console.log(c.#count);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // SyntaxError: Private field must be declared in an enclosing class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7))])}const y=d(p,[["render",k]]),v=JSON.parse('{"path":"/programming-paradigm/43pnhegz/","title":"Objects and Prototypal Inheritance","lang":"en-US","frontmatter":{"title":"Objects and Prototypal Inheritance","createTime":"2025/08/05 12:13:04","permalink":"/programming-paradigm/43pnhegz/"},"readingTime":{"minutes":5.38,"words":430},"git":{"createdTime":1754402445000,"updatedTime":1754402445000,"changelog":[{"hash":"27885b9a1d528e8c4b1de4ba83f5f4fa1d34c13d","time":1754402445000,"email":"yunfeng.long@yahoo.com","author":"WARREN Y.F. LONG","message":"feat: add new notes on Modern ES6+ Features, Objects and Prototypal Inheritance, and Functions"}]},"filePathRelative":"notes/programming-paradigm/js/4.objects.md","headers":[]}');export{y as comp,v as data};
