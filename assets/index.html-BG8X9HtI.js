import{a as r,c as d,b as l,d as i,e as n,w as t,r as h,o,f as s}from"./app-C7AwxLk6.js";const p={},c={class:"vp-field-group"};function k(g,e){const a=h("VPField");return o(),d("div",null,[e[3]||(e[3]=l(`<p>This section dissects the fundamental building blocks of JavaScript, focusing on the nuances of scope, types, coercion, and operators that are critical for writing professional-grade code.</p><h2 id="variables-scope-and-the-temporal-dead-zone-tdz" tabindex="-1"><a class="header-anchor" href="#variables-scope-and-the-temporal-dead-zone-tdz"><span><strong>Variables, Scope, and the Temporal Dead Zone (TDZ)</strong></span></a></h2><p>JavaScript&#39;s variable scoping has evolved significantly. Understanding the differences between <code>var</code>, <code>let</code>, and <code>const</code> is crucial.</p><p><strong><code>var</code></strong>:</p><ul><li><strong>Scope</strong>: Function-scoped. A <code>var</code> declared inside a function is available anywhere in that function. If declared outside any function, it becomes a global variable.</li><li><strong>Hoisting</strong>: <code>var</code> declarations are &quot;hoisted&quot; to the top of their scope, but their assignments are not. This means you can reference a <code>var</code> before its declaration without a <code>ReferenceError</code>, but its value will be <code>undefined</code>.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> checkVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Outputs: undefined</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> myVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">I am hoisted</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">myVar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // Outputs: &quot;I am hoisted&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>let</code> and <code>const</code></strong>:</p><p>Scope:</p><ul><li>Block-scoped. They are only accessible within the <code>{}</code> block they are defined in (e.g., inside an <code>if</code> statement, <code>for</code> loop, or a standalone block).</li></ul><p>Temporal Dead Zone (TDZ):</p><ul><li><code>let</code> and <code>const</code> are also hoisted, but they are not initialized. The period from the start of the block until the declaration is reached is the TDZ. Accessing a variable in its TDZ results in a <code>ReferenceError</code>. This prevents bugs caused by using a variable before it&#39;s declared.</li></ul><p>Immutability:</p><ul><li><code>const</code> creates an immutable <em>binding</em>. For primitive types, this means the value cannot change. For objects and arrays, the reference cannot be changed, but the contents of the object or array <em>can</em> be modified.</li></ul><h2 id="types-coercion-and-equality-deep-dive" tabindex="-1"><a class="header-anchor" href="#types-coercion-and-equality-deep-dive"><span><strong>Types, Coercion, and Equality Deep Dive</strong></span></a></h2><p>JavaScript is a dynamically typed language, but its type system has important rules.</p>`,15)),i("div",c,[n(a,{name:"Primitives vs. Reference Types"},{default:t(()=>e[0]||(e[0]=[i("ul",null,[i("li",null,[i("strong",null,"Primitives"),s(": "),i("code",null,"string"),s(", "),i("code",null,"number"),s(", "),i("code",null,"boolean"),s(", "),i("code",null,"null"),s(", "),i("code",null,"undefined"),s(", "),i("code",null,"symbol"),s(", "),i("code",null,"bigint"),s(". They are passed by "),i("em",null,"value"),s(". When you assign a primitive to another variable, a copy is made.")]),i("li",null,[i("strong",null,"Reference Types"),s(": "),i("code",null,"object"),s(" (which includes "),i("code",null,"array"),s(", "),i("code",null,"function"),s(", etc.). They are passed by "),i("em",null,"reference"),s(". When you assign an object to another variable, both variables point to the "),i("em",null,"same"),s(" location in memory.")])],-1)])),_:1,__:[0]}),n(a,{name:"Implicit vs. Explicit Coercion"},{default:t(()=>e[1]||(e[1]=[i("ul",null,[i("li",null,[i("strong",null,"Implicit Coercion"),s(": JavaScript automatically converts types in certain operations (e.g., "),i("code",null,"5 + '5'"),s(" results in the string "),i("code",null,"'55'"),s("). This is often the source of bugs. The "),i("code",null,"=="),s(" operator is a prime example.")]),i("li",null,[i("strong",null,"Explicit Coercion"),s(": Manually converting a type using functions like "),i("code",null,"Number()"),s(", "),i("code",null,"String()"),s(", or "),i("code",null,"Boolean()"),s(". This is considered a best practice for predictable code.")])],-1),i("div",{class:"language-javascript line-numbers-mode","data-highlighter":"shiki","data-ext":"javascript",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-javascript"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"const"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," numString"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"123"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"const"),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}}," num"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}}," ="),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," Number"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),i("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},"numString"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},");"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," // Explicitly convert string to number")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1,__:[1]}),n(a,{name:"`null` vs. `undefined`"},{default:t(()=>e[2]||(e[2]=[i("ul",null,[i("li",null,[i("code",null,"undefined"),s(" typically means a variable has been declared but not yet assigned a value.")]),i("li",null,[i("code",null,"null"),s(' is an explicit assignment value that means "no value." It is intentionally set by the developer.')]),i("li",null,[s("A key quirk: "),i("code",null,"typeof undefined"),s(" is "),i("code",null,'"undefined"'),s(", but "),i("code",null,"typeof null"),s(" is "),i("code",null,'"object"'),s(". This is a long-standing bug in the language.")])],-1)])),_:1,__:[2]})]),e[4]||(e[4]=l(`<h2 id="modern-operators-and-advanced-logic" tabindex="-1"><a class="header-anchor" href="#modern-operators-and-advanced-logic"><span><strong>Modern Operators and Advanced Logic</strong></span></a></h2><p>Modern JavaScript provides powerful operators for writing more concise and safe code.</p><p><strong>Logical Operator Short-Circuiting</strong>:</p><ul><li><code>||</code> (OR): Evaluates expressions from left to right and returns the <em>first truthy value</em> it finds. If no truthy value is found, it returns the last falsy value. It stops as soon as it finds a truthy value.</li><li><code>&amp;&amp;</code> (AND): Evaluates from left to right and returns the <em>first falsy value</em> it finds. If all values are truthy, it returns the last truthy value. It stops as soon as it finds a falsy value.</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Use case: setting a default value (pre-ES2020)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> providedName</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Guest</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Use case: conditionally calling a function</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">isLoggedIn</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">logOut</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // logOut() only called if isLoggedIn is true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Nullish Coalescing Operator (<code>??</code>)</strong>: This is a safer alternative to <code>||</code> for setting defaults. It only returns the right-hand side value if the left-hand side is <code>null</code> or <code>undefined</code>, ignoring other falsy values like <code>0</code>, <code>&#39;&#39;</code>, or <code>false</code>.</p><p><strong>Optional Chaining (<code>?.</code>)</strong>: Prevents errors when trying to access properties of a potentially <code>null</code> or <code>undefined</code> object. If any part of the chain is <code>null</code> or <code>undefined</code>, the expression short-circuits and returns <code>undefined</code>.</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getProfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Alex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Safely access a nested property</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> street</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">address</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">?.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">street</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Safely call a function that might not exist</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> user</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getData</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">?.();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // undefined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8))])}const y=r(p,[["render",k]]),v=JSON.parse('{"path":"/programming-paradigm/t673accc/","title":"Core Language Mechanics In-Depth","lang":"en-US","frontmatter":{"title":"Core Language Mechanics In-Depth","createTime":"2025/08/05 11:55:01","permalink":"/programming-paradigm/t673accc/"},"readingTime":{"minutes":9.01,"words":721},"git":{"createdTime":1754402445000,"updatedTime":1754402445000,"changelog":[{"hash":"27885b9a1d528e8c4b1de4ba83f5f4fa1d34c13d","time":1754402445000,"email":"yunfeng.long@yahoo.com","author":"WARREN Y.F. LONG","message":"feat: add new notes on Modern ES6+ Features, Objects and Prototypal Inheritance, and Functions"}]},"filePathRelative":"notes/programming-paradigm/js/2.core.md","headers":[]}');export{y as comp,v as data};
